Controllers
===========

Controllers handle operating system interactions. This may include calls to 
driver stacks and low-level hardware. Generally, controllers are just wrapped
Python libraries. 

Controllers are responsible for maintaining a list of available resources that 
it has access to. Controller resources are represented as string, but are 
directly tied to some physical device attached to the system. They are different 
from the resources maintained by the :class:`InstrumentManager` object, in that 
UUIDs are generated by the :class:`InstrumentManager` object when the controller 
notifies it of the existence of a new resource. 

When :class:`InstrumentManager` requests the controller's known resources, the
controller returns the following information:

	* Resource Identifier (str)
	* Vendor Identifier (str)
	* Product Identifier (str)
	
With these pieces of information, the :class:`InstrumentManager` should be able
to locate a suitable model that is compatible with that particular resource.
Resource Identifiers are unique within each controller and maps directly to a
system resource such as a COM port. Identifiers do not have to be unique between
controllers, as the :class:`InstrumentManager` associates each resource with
a UUID.

.. note::
	VISA, Serial (RS-232), USB are examples of controllers

Types of Controllers
--------------------

* Automatic - These controllers can find resources on their own without any 
  additional knowledge. This is typically achieved with a system driver that is
  "plug-'n-play" capable and enumerates devices on insertion.
  
* Manual - These controllers must have additional knowledge to discover a 
  resource. An example of a manual controller is a TCP/IP device. Not all 
  devices will respond to a multi-cast packet, so the user must supply an IP 
  address to find the device.
  
* Hybrid - These controllers can discover resources, but without additional
  information, they will not be able to match a model driver to the
  resource. A serial port controller is an example of this, as the system
  maintains a list of available COM ports, but the user must supply the
  baud rate, stop bits and parity information for the controller to be able
  to establish communication. 
  
Controller Template
-------------------

.. literalinclude:: c_Template.py

Required API Implementations
----------------------------

.. autoclass:: controllers.c_Base
   :members: open, close, getResources, canEditResources

Optional API Implementations
----------------------------

.. autoclass:: controllers.c_Base
   :members: addResource, destroyResource, refresh