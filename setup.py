"""
Setuptools build file

:author: KKENNEDY
"""

# Version (Semantic Versioning)
VER_MAJOR = 0
VER_MINOR = 1
VER_PATCH = 0

# Is this a release version? If so, additional data is appended to full version
RELEASE = False

# Release type
REL_TYPE = 'dev0'    # Development Release
# REL_TYPE = 'alpha0' # Alpha Release
# REL_TYPE = 'beta0'  # Beta Release
# REL_TYPE = 'rc1'    # Release Candidate

# -----------------------------------------------------------------------
# DO NOT CHANGE ANYTHING BELOW THIS LINE
# -----------------------------------------------------------------------

import os
import sys
import time
from setuptools import find_packages

def generate_ver(filename='labtronyx/version.py'):
    # Get Git Revision
    try:
        import subprocess
        GIT_REVISION = subprocess.check_output(['git', 'rev-parse', 'HEAD']).strip()
    except:
        GIT_REVISION = ''

    # Generate version string
    VERSION = '%d.%d.%d' % (VER_MAJOR, VER_MINOR, VER_PATCH)
    BUILD_DATE = time.strftime("%y%m%d")

    if RELEASE:
        # Post-release build
        FULL_VERSION = '%s-%s' % (VERSION, BUILD_DATE)
    else:
        # Pre-release build
        if GIT_REVISION != '':
            FULL_VERSION = '%s.%s+%s' % (VERSION, REL_TYPE, GIT_REVISION[:7])
        else:
            FULL_VERSION = '%s.%s+%s' % (VERSION, REL_TYPE, BUILD_DATE)

    # Generate version file
    ver_py = """# AUTOGENERATED DURING BUILD

ver_sem = '{version}'
ver_full = '{full_version}'
build_date = '{build}'
git_revision = '{git_revision}'
    """
    with open(filename, 'w') as f:
        f.write(ver_py.format(version=VERSION, full_version=FULL_VERSION,
                              build=BUILD_DATE, git_revision=GIT_REVISION))

    return VERSION, FULL_VERSION

def build_package():
    # Generate version file
    version, full_version = generate_ver()

    # Setup Metadata
    setup_meta = dict(
        # Application name:
        name='Labtronyx',

        # Version number
        version=full_version,

        # Application author details:
        author="Kevin Kennedy",
        author_email="protonyx@users.noreply.github.com",

        license="MIT",

        # Packages
        packages=['labtronyx'], #find_packages('labtronyx'),
        #package_dir={'':'labtronyx'},

        # Package data - e.g. non-python modules
        #package_data = {},
        # Include additional files into the package
        include_package_data=True,

        # Details
        url="https://github.com/protonyx/labtronyx",

        #
        # license="LICENSE.txt",
        description='Labtronyx Instrumentation Control Framework',

        # Platforms
        platforms=["Windows", "Mac OS-X", "Linux"],

        # long_description=open("README.txt").read(),

        # Dependent packages (distributions)
        install_requires=[
            "pyvisa",
            "pyserial",
            "numpy",
            "matplotlib",
        ],

        # Unit tests
        test_suite="tests.test_suite"
    )

    print setup_meta['packages']

    try:
        from setuptools import setup
    except ImportError:
        from distutils.core import setup

    # Setuptools
    setup(**setup_meta)

if __name__ == '__main__':
    build_package()